LeetCode 21-Merge Two Sorted Lists 
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode dummy(INT_MIN);            //创建一个假节点在head节点之前，使得head节点和后面的节点操作相同，不需要单独考虑；
        ListNode *r = &dummy;               //dummy.next指向的就是从head节点开始的链表；
        while(l1 && l2)
        {
            if(l1->val > l2->val)
            {
                r->next = l2;
                l2 = l2->next;
            }
            else
            {
                r->next = l1;
                l1 = l1->next;
            }
            r = r->next;
        }
        r->next = l1? l1 : l2;
        return dummy.next;
    }   
};

//常规解
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        ListNode *head = NULL;
        if(l1->val > l2->val)     //把l1和l2中头结点相当较小的一个赋为新头结点；
        {
            head = l2;
            l2 = l2->next;
        }
        else
        {
            head = l1;
            l1 = l1->next;
        }
        ListNode *p = head;
        while(l1 && l2)
        {
            if(l1->val > l2->val)
            {
                p->next = l2;
                l2 = l2->next;
            }
            else
            {
                p->next = l1;
                l1 = l1->next;
            }
            p = p->next;
        }
        if(l1)
            p->next = l1;
        if(l2)
            p->next = l2;
        return head;
    }
};



LeetCode 83-Remove Duplicates from Sorted List
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode *p = head;
        while(p)
        {
            while(p->next && p->val == p->next->val)
                p->next = p->next->next;
            p = p->next;
        }
        return head;
    }
};


LeetCode 141-Linked List Cycle
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head == nullptr)
            return false;
        ListNode *slow = head;
        ListNode *fast = head->next;
        while(fast && fast->next)     //此处的判断条件是重点，不需要判断slow是否为空，因为fast不为空时slow根本不可能为空
        {                              
            if(slow == fast)
                return true;
            slow = slow->next;
            fast = fast->next->next;
        }
        return false;
    }
};
